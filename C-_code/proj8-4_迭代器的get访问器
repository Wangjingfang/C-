// 增加一个正向迭代列表容器中的元素的属性和一个反向迭代列表容器中元素的属性
using System;
using System.Collections;
using System.Collections.Generic;


namespace proj8_5_get访问器与8_4对比
{
    public class MyClass<T> : IEnumerable<T>    // 声明可枚举泛型类
    {
        private T[] data = new T[100];
        private int length = 0;
        public void Add(T e)
        {
            data[length] = e;
            length++;
        }
        IEnumerator IEnumerable.GetEnumerator()     // 添加迭代器的GetEnumerator()属性
        {
            return GetEnumerator();
        }
        public IEnumerator<T> GetEnumerator()   // 实现迭代器方法, 默认使用该方法
        {
            for (int i = 0; i <= length - 1; i++)
                yield return data[i];
        }
        public IEnumerable<T> Positive
        {
            get
            { return this; }
        }
        public IEnumerable<T> Reverse           // 含yield return 语句的属性，迭代器方法的扩展，增加了Reverse方法
        {
            get
            {
                for (int i = length - 1; i >= 0; i--)
                    yield return data[i];
            }
        }
 
    }
    class Program
    {
        static void Main(string[] args)
        {
            MyClass<int> numlist = new MyClass<int>();
            for (int i = 1; i <= 9; i++)
            {
                numlist.Add(i);
            }
            Console.Write("反向数字表： ");
            foreach (int item in numlist.Reverse)
                Console.Write(" {0}", item);
            Console.WriteLine();
            //----------------------------------------------
            MyClass<string> strlist = new MyClass<string>();
            strlist.Add("Marry");
            strlist.Add("Smith");
            strlist.Add("Johnson");
            Console.Write("正向字符串表： ");
            foreach (string item in strlist.Positive)
                Console.Write(" {0}", item);
            Console.WriteLine();
            Console.ReadKey();
        }
    }
}
/*
反向数字表：  9 8 7 6 5 4 3 2 1
正向字符串表：  Marry Smith Johnson
*/
